package utility;

import java.io.*;

import android.graphics.*;
import android.graphics.Bitmap.CompressFormat;
import android.media.*;
import android.net.*;

public class camera_crop {
	
	public Bitmap getBitmap(String mCurrentPhotoPath) {
	    BitmapFactory.Options options = new BitmapFactory.Options();
	    options.inInputShareable = true;
	    options.inDither=false;
	    options.inTempStorage=new byte[32 * 1024];
	    options.inPurgeable = true;
	    options.inJustDecodeBounds = false;
	  	
	  	File f = new File(mCurrentPhotoPath);
	    
	    FileInputStream fs=null;
	    try {
	        fs = new FileInputStream(f);
	    } catch (FileNotFoundException e) {
	        //TODO do something intelligent
	        e.printStackTrace();
	    }
	    
	    Bitmap bm = null;

	    try {
	        if(fs!=null) bm=BitmapFactory.decodeFileDescriptor(fs.getFD(), null, options);
	    } catch (IOException e) {
	        //TODO do something intelligent
	        e.printStackTrace();
	    } finally{ 
	        if(fs!=null) {
	            try {
	                fs.close();
	            } catch (IOException e) {
	                // TODO Auto-generated catch block
	                e.printStackTrace();
	            }
	        }
	    }		
	    return bm;
		}
		
	  public void rotatePhoto(String mCurrentPhotoPath,Uri contentUri) {
			ExifInterface exif;
			try {
				if(mCurrentPhotoPath == null) {
					mCurrentPhotoPath = contentUri.getPath();
				}
				exif = new ExifInterface(mCurrentPhotoPath);
		    int exifOrientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);	    
		    int exifDegree = exifOrientationToDegrees(exifOrientation);
		    if(exifDegree != 0) {
		    	Bitmap bitmap = getBitmap(mCurrentPhotoPath);			    	
			    Bitmap rotatePhoto = rotate(bitmap, exifDegree);
			    saveBitmap(rotatePhoto,mCurrentPhotoPath);			    			    
		    }	    					
			}
			catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}				

	  }
	  
		public int exifOrientationToDegrees(int exifOrientation)
		{
		  if(exifOrientation == ExifInterface.ORIENTATION_ROTATE_90)
		  {
		    return 90;
		  }
		  else if(exifOrientation == ExifInterface.ORIENTATION_ROTATE_180)
		  {
		    return 180;
		  }
		  else if(exifOrientation == ExifInterface.ORIENTATION_ROTATE_270)
		  {
		    return 270;
		  }
		  return 0;
		}
		
		public static Bitmap rotate(Bitmap image, int degrees)
		{
			if(degrees != 0 && image != null)
			{
				Matrix m = new Matrix();
				m.setRotate(degrees, (float)image.getWidth(), (float)image.getHeight());

				try
				{
					Bitmap b = Bitmap.createBitmap(image, 0, 0, image.getWidth(), image.getHeight(), m, true);
					
					if(image != b)
					{
						image.recycle();
						image = b;
					}
						
					image = b;
				} 
				catch(OutOfMemoryError ex)
				{
					ex.printStackTrace();
				}
			}
			return image;
		}
		
		public void saveBitmap(Bitmap bitmap,String mCurrentPhotoPath) {
	  	File file = new File(mCurrentPhotoPath);
	  	OutputStream out = null;
			try {
				out = new FileOutputStream(file);
			}
			catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			bitmap.compress(CompressFormat.JPEG, 100, out) ;
			try {
				out.close();
			}
			catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}		
		}
}
